                                    ADDING BY INDEX: INSERT
  1. Jiho, the store owner, likes to store the items for the display in a list: ['Mango', 'Filet Mignon', 'Chocolate Milk']
Jiho would like to put "Pineapple" in the front of the list so it is the first item customers see in the display window. Use .insert() to add "Pineapple" to the front of the list.
Print the resulting list to see the change.
//
front_display_list.insert(0,"Pineapple")
print(front_display_list)

                                    ADDING BY INDEX: POP
  2. Check out the current list of topics we will be studying in our code editor.: data_science_topics = ["Machine Learning", "SQL", "Pandas", "Algorithms", "Statistics", "Python 3"]
It looks like we have an overlap with our computer science curriculum for the topic of "Python 3". Let’s remove the topic from the list of data_science_topics using our newly learned .pop() method.
Print data_science_topics to see your result.
//
data_science_topics.pop()
print(data_science_topics)

  3. Looks like there is overlap on the "Algorithms" topic as well. Let’s use .pop() to remove it as well. Print data_science_topics to see the changes.
//
data_science_topics.pop(3)
print(data_science_topics)

                                    CONSECUTIVE LISTS: RANGE
  4.1 Modify number_list so that it is a range containing numbers starting at 0 and up to, but not including, 9.
//
number_list = range(9)
print(list(number_list))
  4.2 Create a range called zero_to_seven with the numbers 0 through 7. Print the result in list form.
//
zero_to_seven = range(8)
print(list(zero_to_seven))

                                    THE POWER OF RANGE!
  5.1 Modify the range() function that created the range range_five_three such that it: Starts at 5, Has a difference of 3 between each item, Ends before 15
//
range_five_three = range(5, 15, 3)
  5.2 Create a range called range_diff_five that: Starts at 0, Has a difference of 5 between each item, Ends before 40
//
range_diff_five = range(0, 40, 5)

                                    LENGTH
  6.1 Calculate the length of long_list and save it to the variable long_list_len.
long_list = [1, 5, 6, 7, -23, 69.5, True, "very", "long", "list", "that", "keeps", "going.", "Let's", "practice", "getting", "the", "length"]
big_range = range(2, 3000, 10)
  6.2 Use print() to examine long_list_len.
//
long_list_len = len(long_list)
print(long_list_len)
  6.3 We have provided a completed range() function for the variable big_range: big_range = range(2, 3000, 10).
Calculate its length using the function len() and save it to a variable called big_range_length.
Note: Range objects do not need to be converted to lists in order to determine their length
  6.4 Use print() to examine big_range_length
//
big_range_length = len(big_range)
print(big_range_length)
  6.5 Change the range() function that generates big_range so that it skips 100 instead of 10 steps between items. How does this change big_range_length?
//
big_range = range(2, 3000, 100)
ANSWER: It lowered the length of the list by 10 - 30. 

                                    SLICING LISTS I
  7.1 suitcase = ["shirt", "shirt", "pants", "pants", "pajamas", "books"]
      beginning = suitcase[0:4]
Use print() to examine the variable beginning. Before hitting Run think about what elements beginning will contain?
//
The list will contain all elements apart from the "books".
print(beginning)
  7.2 Modify beginning, so that it selects the first 2 elements of suitcase.
//
beginning = suitcase[0:2]
  7.3 Create a new list called middle that contains the middle two items ( ["pants", "pants"] ) from suitcase. Print middle to see the slice!
//
middle = suitcase [2:4]

                                    SLICING LISTS II
  8.1 Create a new list called last_two_elements containing the final two elements of suitcase. Print last_two_elements to see your result.
//
last_two_elements = suitcase[-2:]
print(last_two_elements)
  8.2 Create a new list called slice_off_last_three containing all but the last three elements. Print slice_off_last_three to see your result.
//
slice_off_last_three = suitcase[:-3]
print(slice_off_last_three)

                                    COUNTING IN A LIST
  9.1 Mrs. Wilson’s class is voting for class president. She has saved each student’s vote into the list votes. Use .count() to determine how many students voted for "Jake" and save 
the value to a variable called jake_votes. Use print() to examine jake_votes.
//
jake_votes = votes.count("Jake")
print(jake_votes)

                                    SORTING LISTS I
  10.1 Use .sort() to sort addresses.
//
addresses = ["221 B Baker St.", "42 Wallaby Way", "12 Grimmauld Place", "742 Evergreen Terrace", "1600 Pennsylvania Ave", "10 Downing St."]
addresses.sort()
  10.2 Use print() to see how addresses changed.
//
addresses = ["221 B Baker St.", "42 Wallaby Way", "12 Grimmauld Place", "742 Evergreen Terrace", "1600 Pennsylvania Ave", "10 Downing St."]
addresses.sort()
print(addresses)
  10.3 Remove the # and whitespace in front of the line sort(names). Edit this line so that it runs without producing a NameError.
//
names = ["Ron", "Hermione", "Harry", "Albus", "Sirius"]
sort(names)    EDITED    names.sort()
  10.4 Use print to examine sorted_cities. Why is it not the sorted version of cities?
//
cities = ["London", "Paris", "Rome", "Los Angeles", "New York"]
sorted_cities = cities.sort()
print(sorted_cities)      --> RETURNS "None" because .sort() does not return any value and thus does not need to be assigned to a variable. 
  10.5 Edit the .sort() call on cities such that it sorts the cities in reverse order (descending). Print cities to see the result.
//
cities = ["London", "Paris", "Rome", "Los Angeles", "New York"]
sorted_cities = cities.sort(reverse=True)
print(cities)

                                    SORTING LISTS I
  11.1 Use sorted() to order games and create a new list called games_sorted.
//
games = ["Portal", "Minecraft", "Pacman", "Tetris", "The Sims", "Pokemon"]
games_sorted = sorted(games)
  11.2 Print both games and games_sorted. How are they different?
//
games = ["Portal", "Minecraft", "Pacman", "Tetris", "The Sims", "Pokemon"]
games_sorted = sorted(games)
print(games)
print(games_sorted)       --> "games_sorted" variable RETURNS alphabetically sorted list and sorted() did not modify original "games" list.

                                    REVIEW
  1. Our friend Jiho has been so successful in both the flower and grocery business that she has decided to open a furniture store. Jiho has compiled a list of inventory items into a 
list called inventory and wants to know a few facts about it. First, how many items are in the warehouse? Save the answer to a variable called inventory_len.
//
inventory_len=len(inventory)
print(inventory_len)
  2. Select the first element in inventory. Save it to a variable called first.
//
first=inventory[1]
print(first)
  3. Select the last element from inventory. Save it to a variable called last.
//
last=inventory[-1]
print(last)
  4. Select items from the inventory starting at index 2 and up to, but not including, index 6. Save your answer to a variable called inventory_2_6.
//
inventory_2_6=inventory[2:6]
print(inventory_2_6)
  5. Select the first 3 items of inventory. Save it to a variable called first_3.
//
first_3=inventory[0:3]        OR           first_3=inventory[:3]
print(first_3)
  6. How many 'twin bed's are in inventory? Save your answer to a variable called twin_beds.
//
twin_beds=inventory.count("twin bed")
print(twin_beds)
  7. Remove the 5th element in the inventory. Save the value to a variable called removed_item.
//
removed_item=inventory.pop(4)
print(inventory)
print(removed_item)
  8. There was a new item added to our inventory called "19th Century Bed Frame". Use the .insert() method to place the new item as the 11th element in our inventory.
//
inventory.insert(10, "19th Century Bed Frame")
print(inventory)
  9. Sort inventory using the .sort() method or the sorted() function. Remember, the sorted() function doesn’t change the original list — it creates a new list with the elements 
properly sorted. If you use sorted() you’ll have to set inventory equal to the value returned by sorted(). Print inventory to see the result.
//
inventory.sort()
print(inventory)
